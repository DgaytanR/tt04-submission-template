--- 
# TinyTapeout project information
project:
  #wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
   - DebounceCircuit.v
   - Giro2.v
   - mod_n_counter.v
   - MullerC.v
   - PulsosReg.v
   - registro.v
   - Rising.v
   - Toggle.v
   - tt_um_TestGiro.v
  top_module:  "tt_um_TestGiro"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Diego Hernán Gaytán Rivas"      # Your name
  title:        "Direction of rotation detector for quadrature encoder"      # Project title
  language:     "Verilog" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "The design takes a pair of square signals with a 90-degree offset from each other generated by an encoder and obtains a pair of signals that define the direction of rotation of the motor being sensed by the encoder."      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      The design takes a pair of square signals with a 90-degree offset from each other generated by an encoder, then passes them through a debounce circuit to eliminate possible glitches and, by means of a state machine, detects the sequences that indicate the direction of rotation.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      After setting the reset (rst port) high, the system starts detecting the sequences. If the rotor turns clockwise, the x1 signal is raised and the x2 signal is kept low, while for counterclockwise, x1 is kept low and x2 is set high. In the case of undefined sequences, both signals are kept low.
# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - clk10M
    - rst
    - d1
    - d2
    - none
    - none
    - none
    - none
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - x1
    - x2
    - none
    - none
    - none
    - none
    - none
    - none
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - none
    - none
    - none
    - none
    - none
    - none
    - none
    - none

# The following fields are optional
  tag:          ""      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     10000000       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository (must be 512kb or less)
